// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStore.API.Data;

namespace OnlineStore.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191128211046_TestInit")]
    partial class TestInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("OnlineStore.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("PhotoUrl");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Таблички",
                            PhotoUrl = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Покрывала",
                            PhotoUrl = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Наволочки",
                            PhotoUrl = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Рушники",
                            PhotoUrl = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Салфетки",
                            PhotoUrl = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Платки",
                            PhotoUrl = "../../assets/img/candle.jpg"
                        });
                });

            modelBuilder.Entity("OnlineStore.API.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorName");

                    b.HasKey("Id");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorName = "Черный"
                        },
                        new
                        {
                            Id = 2,
                            ColorName = "Белый"
                        },
                        new
                        {
                            Id = 3,
                            ColorName = "Бордовый"
                        },
                        new
                        {
                            Id = 4,
                            ColorName = "Синий"
                        });
                });

            modelBuilder.Entity("OnlineStore.API.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("DeiveryMethod");

                    b.Property<bool>("IsTargeted");

                    b.Property<string>("Locality");

                    b.HasKey("Id");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("OnlineStore.API.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeOrder");

                    b.Property<double>("SumOrder");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("OnlineStore.API.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PaymentMethod");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("OnlineStore.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsMain");

                    b.Property<int>("ProductId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            ProductId = 1,
                            Url = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsMain = false,
                            ProductId = 1,
                            Url = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 3,
                            IsMain = true,
                            ProductId = 2,
                            Url = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 4,
                            IsMain = true,
                            ProductId = 3,
                            Url = "../../assets/img/candle.jpg"
                        },
                        new
                        {
                            Id = 5,
                            IsMain = true,
                            ProductId = 4,
                            Url = "../../assets/img/candle.jpg"
                        });
                });

            modelBuilder.Entity("OnlineStore.API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Balance");

                    b.Property<int>("CategoryId");

                    b.Property<int>("ColorId");

                    b.Property<double>("Cost");

                    b.Property<string>("Description");

                    b.Property<bool>("IsAvailable");

                    b.Property<int>("MinQuantity");

                    b.Property<string>("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 10,
                            CategoryId = 1,
                            ColorId = 1,
                            Cost = 7.5,
                            Description = "some",
                            IsAvailable = true,
                            MinQuantity = 10,
                            ProductName = "Табличка пластик 18х25"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 10,
                            CategoryId = 1,
                            ColorId = 1,
                            Cost = 8.5,
                            Description = "some",
                            IsAvailable = true,
                            MinQuantity = 10,
                            ProductName = "Табличка пластик 20х25"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 10,
                            CategoryId = 1,
                            ColorId = 1,
                            Cost = 11.0,
                            Description = "some",
                            IsAvailable = true,
                            MinQuantity = 10,
                            ProductName = "Табличка литьё"
                        },
                        new
                        {
                            Id = 4,
                            Balance = 10,
                            CategoryId = 1,
                            ColorId = 2,
                            Cost = 15.800000000000001,
                            Description = "some",
                            IsAvailable = true,
                            MinQuantity = 10,
                            ProductName = "Табличка металл"
                        },
                        new
                        {
                            Id = 5,
                            Balance = 10,
                            CategoryId = 2,
                            ColorId = 2,
                            Cost = 60.0,
                            Description = "some",
                            IsAvailable = true,
                            MinQuantity = 1,
                            ProductName = "Покрывало рюш шелк"
                        },
                        new
                        {
                            Id = 6,
                            Balance = 10,
                            CategoryId = 2,
                            ColorId = 3,
                            Cost = 95.0,
                            Description = "some",
                            IsAvailable = true,
                            MinQuantity = 1,
                            ProductName = "Покрывало рюш атлас"
                        },
                        new
                        {
                            Id = 7,
                            Balance = 10,
                            CategoryId = 3,
                            ColorId = 2,
                            Cost = 27.5,
                            Description = "some",
                            IsAvailable = true,
                            MinQuantity = 10,
                            ProductName = "Наволочка жатка"
                        },
                        new
                        {
                            Id = 8,
                            Balance = 10,
                            CategoryId = 4,
                            ColorId = 2,
                            Cost = 32.5,
                            Description = "some",
                            IsAvailable = true,
                            MinQuantity = 10,
                            ProductName = "Рушник габардин 36"
                        });
                });

            modelBuilder.Entity("OnlineStore.API.Models.StringsOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("StringsOrder");
                });

            modelBuilder.Entity("OnlineStore.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DeliveryId");

                    b.Property<string>("Email");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Patronymic");

                    b.Property<int?>("PaymentId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserName");

                    b.Property<string>("UserSurname");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineStore.API.Models.Order", b =>
                {
                    b.HasOne("OnlineStore.API.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineStore.API.Models.Photo", b =>
                {
                    b.HasOne("OnlineStore.API.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineStore.API.Models.Product", b =>
                {
                    b.HasOne("OnlineStore.API.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineStore.API.Models.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineStore.API.Models.StringsOrder", b =>
                {
                    b.HasOne("OnlineStore.API.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineStore.API.Models.Product", "Product")
                        .WithMany("StringsOrder")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineStore.API.Models.User", b =>
                {
                    b.HasOne("OnlineStore.API.Models.Delivery", "Delivery")
                        .WithMany("Users")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("OnlineStore.API.Models.Payment", "Payment")
                        .WithMany("Users")
                        .HasForeignKey("PaymentId");
                });
#pragma warning restore 612, 618
        }
    }
}
